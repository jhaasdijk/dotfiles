
"-- plugins
" run ':PlugInstall' to update

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()

" General
Plug 'wincent/terminus'
Plug 'godlygeek/tabular'    " = Plugin for aligning text (vertically :Tabular)
Plug 'junegunn/goyo.vim'    " = Distraction-free writing in Vim
Plug 'jiangmiao/auto-pairs' " = Insert or delete brackets, parens, quotes in pair
Plug 'tpope/vim-surround'   " = all about 'surroundings'
Plug 'rkitover/vimpager'    " = Enable vim as a pager
Plug 'lilydjwg/colorizer'   " = Enable inline color preview

" Theming
Plug 'joshdick/onedark.vim'    " = onedark color scheme
Plug 'chriskempson/base16-vim' " = base16 color scheme
Plug 'flazz/vim-colorschemes'  " = Colorscheme manager

Plug 'itchyny/lightline.vim'

Plug 'scrooloose/nerdtree'     " = The true panel
Plug 'jistr/vim-nerdtree-tabs' " = The true panel, independent of tabs

" Languages
Plug 'sheerun/vim-polyglot'                            " = A collection of language packs for Vim
Plug 'xuhdev/vim-latex-live-preview', { 'for': 'tex' } " = Live Previewing LaTeX PDF Output
Plug 'plasticboy/vim-markdown'                         " = Syntax highlighting, matching rules and mappings for Markdown

" Git
Plug 'airblade/vim-gitgutter' " = Git diff in the gutter

" javascript development
Plug 'pangloss/vim-javascript'
Plug 'w0rp/ale'                " = asynchronous lint engine

call plug#end()

"-- General

set number
set cursorline
set incsearch
set ruler
set nocompatible
set shiftwidth=4
set tabstop=4
set expandtab
set showmatch
set noshowmode

set encoding=utf-8

"-- bindings

nnoremap <C-up> <C-y>
nnoremap <C-k> <C-y>

nnoremap <C-down> <C-E>
nnoremap <C-j> <C-E>

map <C-n> <plug>NERDTreeTabsToggle<CR>

command Pdfrun execute "silent !pandoc --filter pandoc-citeproc -o %.pdf %" | redraw!
map <F5> :Pdfrun<CR>

vmap <C-c> :w !xclip -i -sel c

"-- Theming
if (empty($TMUX))
  if (has("nvim"))
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  if (has("termguicolors"))
    set termguicolors
  endif
endif

let g:lightline = {
      \ 'colorscheme': 'jellybeans'
      \ }
" wombat, solarized, powerline, jellybeans, Tomorrow,
" Tomorrow_Night, Tomorrow_Night_Blue, Tomorrow_Night_Eighties,
" PaperColor, seoul256, landscape, one, darcula, molokai, materia,
" material, OldHope, nord, 16color, deus

syntax on
set laststatus=2
colorscheme Tomorrow-Night-Bright 
hi clear CursorLine
hi CursorLine gui=underline
let base16colorspace=256  " Access colors present in 256 colorspace

"-- Latex
let g:livepreview_previewer = 'zathura'

"-- Javascript
let g:javascript_plugin_flow = 1
let b:ale_fixers = {'javascript': ['prettier', 'eslint']}
map <C-d> :ALEFix<CR>

"-- Goyo
let g:goyo_width  = "50%+20%"
let g:goyo_height = "100%-5%"

"-- Vim Markdown
let g:vim_markdown_folding_disabled = 1

